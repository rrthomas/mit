// Macros for the inner loop and instruction actions.
//
// (c) Mit authors 1994-2020
//
// The package is distributed under the MIT/X11 License.
//
// THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
// RISK.

#ifndef MIT_RUN_H
#define MIT_RUN_H


// Optimization
// Hint that `x` is usually true/false.
// https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html
#if @HAVE___BUILTIN_EXPECT@ == 1
#define likely(x) __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else
#define likely(x) (x)
#define unlikely(x) (x)
#endif

// Arithmetic right shift `n` by `p` places (the behaviour of >> on signed
// quantities is implementation-defined in C99).
#if HAVE_ARITHMETIC_RSHIFT
#define ARSHIFT(n, p) \
    ((mit_word_t)(n) >> (p))
#else
#define ARSHIFT(n, p) \
    (((n) >> (p)) | ((mit_uword_t)(-((mit_word_t)(n) < 0)) << (MIT_WORD_BIT - (p))))
#endif

// Pop a stack item into a variable.
#define POP(var)                                        \
    mit_uword_t var;                                    \
    if (stack_depth < 1)                                \
        RAISE(MIT_ERROR_INVALID_STACK_READ);            \
    var = *mit_stack_pos(stack, stack_depth, 0);        \
    stack_depth--;

// Push an expression to the stack.
#define PUSH(expr)                                      \
    if (mit_stack_words - stack_depth < 1)              \
        RAISE(MIT_ERROR_INVALID_STACK_WRITE);           \
    stack_depth++;                                      \
    *mit_stack_pos(stack, stack_depth, 0) = (expr);

// Raise an error during the execution of an instruction.
// RAISE must be called before writing any state.
#define RAISE(code)                                           \
    do {                                                      \
        error = (code);                                       \
        goto error;                                           \
    } while (0)

// Perform the action of NEXT.
#define DO_NEXT                                 \
    ir = *pc++

// Perform the action of JUMP.
#define DO_JUMP                                         \
    do {                                                \
        if (unlikely(addr % sizeof(mit_word_t) != 0))   \
            RAISE(MIT_ERROR_UNALIGNED_ADDRESS);         \
        pc = (mit_word_t *)addr;                        \
    } while (0)

// Perform the action of JUMPI.
#define DO_JUMPI                                        \
    do {                                                \
        pc += ir;                                       \
        ir = 0;                                         \
    } while (0)

// Perform CALL, given an address.
#define DO_CALL(addr)                                                   \
    do {                                                                \
        POP(callee_nres);                                               \
        POP(callee_nargs);                                              \
        if (callee_nargs > stack_depth || stack_depth - callee_nargs < callee_nres) \
            RAISE(MIT_ERROR_INVALID_STACK_READ);                        \
        stack_depth -= callee_nargs;                                    \
        run_inner((mit_word_t *)addr, 0, stack + stack_depth, callee_nargs, callee_nres, jmp_buf_ptr); \
        ir = 0; /* Set `ir` to 0 as part of `ret`. */                   \
    } while (0)


#endif
