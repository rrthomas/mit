#!/usr/bin/env python3
# Generate code for instructions.
#
# (c) SMite authors 1994-2019
#
# The package is distributed under the MIT/X11 License.
#
# THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
# RISK.

from smite_core import vm_data, instruction_gen

# Write the output file
print('''\
// Auto-generated by gen-instructions - DO NOT EDIT.
// Run the virtual machine.

#include "config.h"

#include "smite.h"
#include "opcodes.h"

#define RAISE(code)                                           \\
    do {                                                      \\
        int error = (code);                                   \\
        S->PC = initial_PC;                                   \\
        S->I = initial_I;                                     \\
        S->STACK_DEPTH = initial_STACK_DEPTH;                 \\
        return error;                                         \\
    } while (0)

#define NEXT                                                  \\
    do {                                                      \\
        if (S->I != 0)                                        \\
            RAISE(SMITE_ERR_INVALID_OPCODE);                  \\
        int ret = load_word(S, S->PC, (smite_WORD *)&(S->I)); \\
        if (ret != 0)                                         \\
            RAISE(ret);                                       \\
        S->PC += WORD_SIZE;                                   \\
    } while (0)

smite_WORD smite_single_step(smite_state *S) {
    smite_UWORD initial_PC = S->PC;
    smite_UWORD initial_I = S->I;
    smite_UWORD initial_STACK_DEPTH = S->STACK_DEPTH;
    smite_BYTE opcode = S->I & SMITE_INSTRUCTION_MASK;
    S->I >>= SMITE_INSTRUCTION_BIT;
''')

print(instruction_gen.dispatch(vm_data.Instructions, 'O_', '''\
        /* Undefined instruction. */
        RAISE(SMITE_ERR_INVALID_OPCODE);
'''))

print('''

    return SMITE_ERR_OK;
}


smite_WORD smite_run(smite_state *S)
{
    smite_WORD ret;
    while ((ret = smite_single_step(S)) == 0)
        ;
    return ret;
}''')
