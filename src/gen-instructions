#!/usr/bin/env python3
# Generate code for instructions.
#
# (c) Reuben Thomas 1994-2019
#
# The package is distributed under the MIT/X11 License.
#
# THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
# RISK.

from smite_core import vm_data, instruction_gen

# Write the output file
print('''\
// Auto-generated by gen-instructions - DO NOT EDIT.
// The interface calls single_step() : integer and run() : integer.

#include "config.h"

#include "smite.h"
#include "opcodes.h"
#include "extra.h"

#define RAISE(code)                         \\
    do {                                    \\
        int error = (code);                 \\
        S->PC = initial_PC;                 \\
        S->STACK_DEPTH = initial_STACK_DEPTH; \\
        return error;                       \\
    } while (0)

static inline int LOAD_IMMEDIATE_WORD(smite_state *S, smite_UWORD addr, smite_WORD *value)
{
    smite_WORD v = 0;
    for (unsigned i = WORD_SIZE; i > 0; i--) {
        smite_BYTE b;
        int ret = load_byte(S, addr + i - 1, &b);
        if (ret != 0)
            return ret;
        v = (v << smite_BYTE_BIT) | b;
    }
    *value = v;
    return SMITE_ERR_OK;
}

smite_WORD smite_single_step(smite_state *S) {
    smite_UWORD initial_PC = S->PC;
    smite_UWORD initial_STACK_DEPTH = S->STACK_DEPTH;
    smite_BYTE I;
    int res = load_byte(S, S->PC++, &I);
    if (res != 0)
        return res;
''')

print(instruction_gen.dispatch(vm_data.Instructions, 'O_', '''\
        /* Undefined instruction; try extra instructions */
        {
            int ret = smite_extra(S, I);
            if (ret != 0)
                RAISE(ret);
        }'''))

print('''

    return SMITE_ERR_OK;
}


smite_WORD smite_run(smite_state *S)
{
    smite_WORD ret;
    while ((ret = smite_single_step(S)) == 0)
        ;
    return ret;
}''')
