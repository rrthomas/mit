// Public data structures and interface calls.
// This is the header file to include in programs using Mit.
//
// (c) Mit authors 1994-2020
//
// The package is distributed under the MIT/X11 License.
//
// THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
// RISK.

#ifndef MIT_MIT_H
#define MIT_MIT_H


#include <stddef.h>
#include <inttypes.h>
#include <sys/types.h>

#include <mit/opcodes.h>


// Thread-local storage
#define MIT_THREAD_LOCAL @THREAD_LOCAL@

// Types and constants
typedef ssize_t mit_word_t;
typedef size_t mit_uword_t;
#define MIT_WORD_BIT (sizeof(mit_word_t) * 8)
#define MIT_UWORD_MAX ((mit_uword_t)-1)

// TODO: find largest type: bigger of long double and intmax_t?
typedef uintmax_t mit_max_stack_item_t;

// The type of a function that mutates the VM
typedef mit_word_t mit_fn(mit_word_t *pc);

// The type of a function that runs in the context of a VM frame
typedef mit_word_t mit_callback_fn(mit_word_t *pc, mit_word_t ir, mit_word_t * restrict stack, mit_uword_t *stack_depth_ptr);

// Stack
extern MIT_THREAD_LOCAL mit_uword_t mit_stack_words;
// The stack is implemented as a `stack_words`-element array at `stack`.
#define mit_stack_pos(stack, stack_depth, pos) \
    ((stack) + (stack_depth) - (mit_uword_t)(pos) - 1)


// VM control

extern MIT_THREAD_LOCAL mit_fn *mit_run;
/* Execute VM code. Defaults to `mit_run_simple`. Can be set to any
   compatible function, which thereby propagates to nested VMs via the `RUN`
   extra instruction. This allows a different implementation (optimized,
   profiling) to be used globally.
*/

mit_word_t mit_run_simple(mit_word_t *pc);
/* Start the execution cycle in the given state as described in the spec.
   If an error is raised, the code is returned.

   This is a naive implementation.
*/

mit_word_t mit_run_fast(mit_word_t *pc);
/* Like `mit_run_simple`, but (hopefully) faster. */

// N.B. The profiler is per-thread.
void mit_profile_reset(void);
/* Clears the profile. */
mit_word_t mit_run_profile(mit_word_t *pc);
/* Like `mit_run_fast`, but records profiling information. */
int mit_profile_dump(int fd);
/* Dump profiling information to file descriptor `fd`. */

extern MIT_THREAD_LOCAL mit_callback_fn *mit_break_fn;
mit_word_t mit_run_break(mit_word_t *pc);
/* Like `mit_run_simple`, but calls `mit_break` after each instruction. */

extern int mit_argc;
/* The registered value of `argc`. */
extern char **mit_argv;
/* The registered value of `argv`. */

#endif
