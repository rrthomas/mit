// Public data structures and interface calls.
// This is the header file to include in programs using Mit.
//
// (c) Mit authors 1994-2020
//
// The package is distributed under the MIT/X11 License.
//
// THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
// RISK.

#ifndef MIT_MIT_H
#define MIT_MIT_H


#include <stddef.h>
#include <limits.h>
#include <inttypes.h>
#include <sys/types.h>

#include <mit/opcodes.h>


// Thread-local storage
#define MIT_THREAD_LOCAL @THREAD_LOCAL@

// Build-time parameters
#define MIT_WORD_BYTES @SIZEOF_SIZE_T@
#if MIT_WORD_BYTES != 4 && MIT_WORD_BYTES != 8
#error "MIT_WORD_BYTES must be 4 or 8!"
#endif

// Types and constants
#define MIT_BYTE_BIT 8
#define MIT_BYTE_MASK ((1 << MIT_BYTE_BIT) - 1)
#define MIT_WORD_BIT (MIT_BYTE_BIT * MIT_WORD_BYTES)

#define MIT_UWORD_MAX SIZE_MAX
#define MIT_WORD_MASK MIT_UWORD_MAX
#define MIT_WORD_MIN (-SSIZE_MAX - 1)
#define MIT_WORD_MAX SSIZE_MAX

typedef unsigned char mit_byte;
typedef ssize_t mit_word;
typedef size_t mit_uword;

// TODO: find largest type: bigger of long double and intmax_t?
// Number in next line is sizeof(intmax_t)
#if MIT_WORD_BYTES < @SIZEOF_INTMAX_T@
typedef uintmax_t mit_max_stack_item_t;
#else
typedef mit_uword mit_max_stack_item_t;
#endif

// The type of a function that mutates the VM
typedef mit_word mit_fn(mit_word *pc);

// VM State
extern MIT_THREAD_LOCAL mit_uword mit_stack_words;

// Constants (for easy FFI binding)
extern const unsigned mit_word_bytes;
extern const unsigned mit_byte_bit;
extern const unsigned mit_byte_mask;
extern const unsigned mit_word_bit;
extern const mit_uword mit_word_mask;
extern const mit_uword mit_uword_max;
extern const mit_word mit_word_min;
extern const mit_word mit_word_max;

// Instructions
#define MIT_OPCODE_BIT 8
#define MIT_OPCODE_MASK ((1 << MIT_OPCODE_BIT) - 1)
extern const unsigned mit_opcode_bit;
extern const unsigned mit_opcode_mask;


// Stack access

// Unchecked macro: UNSAFE!
#define UNCHECKED_STACK(stack, stack_depth, pos) \
    ((stack) + (stack_depth) - (mit_uword)(pos) - 1)


// VM control

extern MIT_THREAD_LOCAL mit_fn *mit_run;
/* Execute VM code. Defaults to `mit_run_simple`. Can be set to any
   compatible function, which thereby propagates to nested VMs via the `RUN`
   extra instruction. This allows a different implementation (optimized,
   profiling) to be used globally.
*/

mit_word mit_run_simple(mit_word *pc);
/* Start the execution cycle in the given state as described in the spec.
   If an error is raised, the code is returned.

   This is a naive implementation.
*/

mit_word mit_run_fast(mit_word *pc);
/* Like `mit_run_simple`, but (hopefully) faster. */

// N.B. The profiler is per-thread.
void mit_profile_reset(void);
/* Clears the profile. */
mit_word mit_run_profile(mit_word *pc);
/* Like `mit_run_fast`, but records profiling information. */
int mit_profile_dump(int fd);
/* Dump profiling information to file descriptor `fd`. */

extern MIT_THREAD_LOCAL mit_word (*mit_break_fn)(mit_word *pc, mit_word ir, mit_word * restrict stack, mit_uword stack_depth);
mit_word mit_run_break(mit_word *pc);
/* Like `mit_run_simple`, but calls `mit_break` after each instruction. */

extern int mit_argc;
/* The registered value of `argc`. */
extern char **mit_argv;
/* The registered value of `argv`. */

#endif
