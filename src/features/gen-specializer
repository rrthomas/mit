#!/usr/bin/env python3
# Generate code for instructions.
#
# (c) Mit authors 1994-2019
#
# The package is distributed under the MIT/X11 License.
#
# THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
# RISK.

import sys, pickle, textwrap

from mit_core.code_util import Code, FETCH
from mit_core.vm_data import Instruction
from specializer import CacheState, gen_case
from path import SpecializedInstruction, State


MIT_OPCODE_BIT = 8 # TODO: Get this from the same source as "mit.h" does.

# Load the labels file, which tells us what control-flow graph to generate.
if len(sys.argv) != 2:
    print("Usage: gen-specializer LABELS-FILE", file=sys.stderr)
    sys.exit(1)

class Label:
    '''
     - name - str - The C identifier of this Label.
     - tos_constant - int - the constant at the top of the stack at this
       Label, or `None` if the top stack item is not known to be constant.
     - cached_depth - int - the number of stack items that are cached in C
       variables at this Label.
     - checked_depth - int - the number of empty stack slots that are known to
       exist above the top of the stack at this Label.
     - guess - str - the most probable next instruction sequence.
       (space-separated).
     - if_correct - int - the Label index to jump to if `guess` is correct.
     - if_wrong - int - the Label index to jump to if `guess` is wrong.
    '''
    def __init__(
        self,
        name,
        tos_constant=None,
        cached_depth=0,
        checked_depth=0,
        guess=None,
        if_correct=None,
        if_wrong=None,
    ):
        self.name = name
        self.tos_constant = tos_constant
        self.cached_depth = cached_depth
        self.checked_depth = checked_depth
        self.guess = guess
        self.if_correct = if_correct
        self.if_wrong = if_wrong

    def cache_state(self):
        '''Returns a fresh CacheState describing this Label.'''
        return CacheState(self.cached_depth, self.checked_depth)

    def goto(self, cache_state):
        '''
        Returns a Code to jump to this Label.
         - cache_state - The CacheState before the goto. This method generates
           code to flush the cache to meet the expectations at this Label.
        '''
        code = Code()
        code.extend(cache_state.flush(self.cache_state()))
        code.append('goto {};'.format(self.name))
        return code

    def generate_code(self):
        '''
        Returns a Code to place at this Label.
        Also returns the peak value of `CacheState.cached_depth`.
        '''
        # Generate the Code for the branch where the guess is correct.
        # Also, compute the guess bit string.
        c_code = Code()
        opcode_value = 0 # Bit pattern to match.
        opcode_bits = 0 # Number of bits to match.
        state = State(tos_constant=self.tos_constant)
        cache_state = self.cache_state()
        for i_name in self.guess.split():
            instruction = state.specialize_instruction(Instruction[i_name])
            assert opcode_bits is not None
            opcode_value |= instruction.opcode << opcode_bits
            opcode_bits += MIT_OPCODE_BIT
            if instruction.terminal:
                opcode_bits = None # Must match all bits.
            state = state.step(instruction)
            c_code.extend(FETCH)
            c_code.extend(Code(*[
                '{{ // {}'.format(instruction.name),
                gen_case(instruction, cache_state),
                '}',
            ]))
        c_code.extend(label_by_index(self.if_correct).goto(cache_state))
        pops = -state.stack_min
        pushes = state.stack_max - state.stack_min
        max_cached_depth = self.cached_depth + state.stack_max
        # Generate the code for the branch where the guess is wrong.
        cache_state = self.cache_state()
        w_code = label_by_index(self.if_wrong).goto(cache_state)
        # Generate the guess condition.
        opcode = 'S->I'
        if opcode_bits is not None:
            opcode = '({} & {})'.format(opcode, hex((1 << opcode_bits) - 1))
        cache_state = self.cache_state()
        tests = [
            '{} == {}'.format(opcode, hex(opcode_value)),
            'likely({})'.format(cache_state.underflow_test(pops)),
            'likely({})'.format(cache_state.overflow_test(pops, pushes)),
        ]
        # Generate the main Code.
        code = Code(
            'assert(error == MIT_ERROR_OK);',
            'assert(cached_depth == {});'.format(self.cached_depth),
            'if ({}) {{'.format(' && '.join(tests)),
            c_code,
            '}',
        )
        code.extend(w_code)
        return (code, max_cached_depth)


with open(sys.argv[1], "rb") as h:
    labels = [
        Label('A_{}'.format(index), tos, ca, ch, gu, ic, iw)
        for index, (tos, ca, ch, gu, ic, iw) in enumerate(pickle.load(h))
    ]

def label_by_index(index):
    if index is None:
        return Label('A_FALLBACK')
    return labels[index]


# Generate the code for the labels first, so as to compute `max_cached_depth`.
labels_code = Code()
labels_code.append(Code('''\
    mit_uword initial_PC, initial_I;
    // The number of stack items cached in C variables.
    int cached_depth = 0;
    goto A_0;

    // Each A_XXX label has an expectation of what instruction sequence
    // probably comes next. If correct, there is a fast path for executing
    // that sequence, otherwise we fall back on a slow path with broader
    // expectations. Ultimately, we fall back to `A_FALLBACK` which calls
    // `smite_single_step()` to handle corner cases.
    //
    // The calling convention at each A_XXX label is as follows:
    //
    //  - On entry, `error` is `MIT_ERROR_OK`. `cached_depth` is a
    //    compile-time constant indicating how many top stack items are in
    //    C variables.
    //  - Before running the `Instruction.code` for an instruction, record
    //    `initial_PC` and `initial_I`, and right-shift `I`.
    //  - When an error occurs, call `RAISE(code)`.
    //    It sets `error` to the return code; then it resets PC and
    //    I to their initial values, and does "goto error".
    //  - On exit, whether by `RAISE` or otherwise, all Mit
    //    registers must be set according to the Mit spec. In particular,
    //    there must be no side effects before a RAISE, except on `I` and
    //    `PC`, which will be reset as described above.
'''))
max_cached_depth = 0
for label in labels:
    labels_code.append('')
    labels_code.append('{label_name}:'.format(label_name=label.name))
    label_code, cached_depth = label.generate_code()
    labels_code.append(label_code)
    max_cached_depth = max(max_cached_depth, cached_depth)
labels_code.append('')
labels_code.append('''\
    A_FALLBACK:
        assert(error == MIT_ERROR_OK);
        assert(cached_depth == 0);
        error = mit_single_step(S);
        continue;

    error:
        S->PC = initial_PC;
        S->I = initial_I;
        switch (cached_depth) {
''')
switch_code = Code()
cache_state = CacheState(max_cached_depth, 0)
while cache_state.cached_depth > 0:
    switch_code.append('case {}:'.format(cache_state.cached_depth))
    case_code = Code()
    case_code.extend(cache_state.flush(cache_state.cached_depth - 1))
    case_code.append('// Falls through.')
    switch_code.append(case_code)
switch_code.append('''\
    case 0:
        break;
    default:
        assert(0); // Unreachable.
    }
''')
labels_code.append(switch_code)

# Construct a Code for the function body, copying `labels_code`.
body_code = Code()
body_code.append('int error = MIT_ERROR_OK;')
if max_cached_depth > 0:
    cache_state = CacheState(max_cached_depth, 0)
    body_code.append('mit_word {};'.format(
        ', '.join(
            cache_state.var(pos)
            for pos in reversed(range(max_cached_depth))
        )
    ))
body_code.append('do {')
body_code.extend(labels_code)
body_code.append('''\
    } while (error == MIT_ERROR_OK);
    return error;
''')


# Generate the code for the entire source file, incorporating `body_code`.
code = Code()
code.append('''\
    // Auto-generated by gen-specializer - DO NOT EDIT.
    // Run the virtual machine.

    #include "config.h"

    #include <assert.h>
    #include <stdio.h>

    #include "mit/mit.h"
    #include "mit/features.h"


    mit_word mit_specializer_run(mit_state * restrict S) {
''')
code.append(body_code)
code.append('}')

print(code)