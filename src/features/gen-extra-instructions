#!/usr/bin/env python3
# Generate code for extra instructions.
#
# (c) Mit authors 1994-2019
#
# The package is distributed under the MIT/X11 License.
#
# THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
# RISK.

from mit_core.code_util import Code
from mit_core.instruction_gen import *


# Get type sizes and inject them into instruction_gen
from type_sizes import type_sizes
assert 'mit_word' in type_sizes
word_bytes = type_sizes['mit_word']
type_wordses = {type: (size + word_bytes - 1) // word_bytes
                for type, size in type_sizes.items()}
import mit_core.instruction_gen
mit_core.instruction_gen.type_wordses = type_wordses

from extra_instructions import *

# Write the output file
code = Code()
code.append('''\
    // Auto-generated by gen-extra-instructions - DO NOT EDIT.
    // Run the virtual machine.


    #include "config.h"'''
)
code.append('')

for lib in LibInstruction:
    code.append(lib.includes)

code.append('''
    #include "mit/extra-opcodes.h"


    enum {
        MIT_ERROR_EXTRA_INVALID_LIBRARY = 16,
        MIT_ERROR_EXTRA_INVALID_FUNCTION = 17,
    };'''
)

for lib in LibInstruction:
    code.append('')
    code.append('''\
        static mit_word extra_{}(mit_state * restrict S, mit_word opcode)
        {{
            mit_word error = MIT_ERROR_OK;'''.format(str.lower(lib.name))
    )
    code.append('')

    body_code = Code()
    body_code.extend(dispatch(lib.library,
        RAISE('MIT_ERROR_EXTRA_INVALID_FUNCTION'),
    ))
    body_code.append('')
    code.append(body_code)

    code.append('''
        error:
            return error;
        }''')

code.append('')
code.append('''\
    mit_word mit_extra_instruction(mit_state * restrict S)
    {
        mit_word error = MIT_ERROR_OK;'''
)
code.append('')

body_code = Code()
body_code.append('mit_uword opcode = S->I >> mit_opcode_bit;')
body_code.extend(dispatch(LibInstruction, Code(
    'return MIT_ERROR_EXTRA_INVALID_LIBRARY;'
)))
body_code.append('return error;')
code.append(body_code)

code.append('')
code.append('''
    error:
        return error;
    }''')

print(code)
